{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","Cardlist","cats","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredCats","filter","cat","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"kSAmBeA,EAjBF,SAAC,GAIL,IAHLC,EAGI,EAHJA,KACAC,EAEI,EAFJA,MAEI,EADJC,GAGF,OACE,yBAAKC,UAAU,mDACb,yBAAKC,IAAI,OAAOC,IAAG,+BAA0BL,EAA1B,4BACnB,6BACE,4BAAKA,GACL,2BAAIC,MCUGK,EApBE,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAElB,OACE,6BAEIA,EAAKC,KAAI,SAACC,EAAMC,GACd,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLR,GAAIK,EAAKG,GAAGR,GACZF,KAAMO,EAAKG,GAAGV,KACdC,MAAOM,EAAKG,GAAGT,aCEdW,G,MAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAChC,OACE,yBAAKX,UAAU,OACb,2BACAA,UAAU,sBACVY,KAAK,SACLC,YAAY,sBACZC,SAAYH,OCAHI,EARA,SAACC,GACd,OACE,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,UACxCH,EAAMI,WCiBEC,E,YAnBb,WAAYL,GAAQ,IAAD,8BACjB,4CAAMA,KACDM,MAAQ,CACXC,UAAU,GAHK,E,+EAOHC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAIxB,OAAIG,KAAKJ,MAAMC,SACN,2DAEFG,KAAKV,MAAMI,a,GAhBKQ,aC+CZC,G,kBAxCb,aAAe,IAAD,8BACZ,+CAaFC,eAAiB,SAACC,GAChB,EAAKJ,SAAS,CAAEjB,YAAaqB,EAAMC,OAAOC,SAb1C,EAAKX,MAAQ,CACXlB,KAAM,GACNM,YAAa,IAJH,E,iFAQO,IAAD,OAClBwB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAAEvB,KAAMkC,S,+BAO5B,IAAD,EACsBZ,KAAKJ,MAA3BlB,EADA,EACAA,KAAMM,EADN,EACMA,YACR6B,EAAenC,EAAKoC,QAAO,SAAAC,GAC/B,OAAOA,EAAI5C,KAAK6C,cAAcC,SAASjC,EAAYgC,kBAErD,OAAQtC,EAAKwC,OAGT,yBAAK5C,UAAU,UACb,wBAAIA,UAAU,MAAd,0BACA,kBAAC,EAAD,CAAWW,aAAce,KAAKI,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU1B,KAAMmC,OAPxB,wBAAIvC,UAAU,MAAd,e,GAzBY4B,cCIEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLoC,QAAQpC,MAAMA,EAAMqC,c","file":"static/js/main.7ca1b871.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({\n    name,\n    email,\n    id\n  }) => {\n  \n  return (\n    <div className='tc b--pink-30 dib br3 pa3 ma3 grow bw2 shadow-5'>\n      <img alt='cats' src={`https://robohash.org/${name}?set=set4&size=200x200`}></img>\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst Cardlist = ({ cats }) => {\n\n  return (\n    <div>\n      { \n        cats.map((user, i) => {\n          return (\n            <Card \n              key={i} \n              id={cats[i].id} \n              name={cats[i].name} \n              email={cats[i].email}\n            />\n          );\n        }) \n      }\n    </div>\n  );\n}\n\nexport default Cardlist;","import React from 'react';\nimport './SearchBox.css';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input \n      className='pa3 ba b--green br3'\n      type='search' \n      placeholder='Search your friends' \n      onChange = {searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflowY: 'scroll', height: '800px'}}>\n      {props.children}\n    </div>\n  )\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\ncomponentDidCatch(error, info) {\n  this.setState({ hasError: true })\n}\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Ooops. Something went wrong</h1>\n    }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\nimport Cardlist from '../components/Cardlist';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundry';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      cats: [],\n      searchfield: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({ cats: users}))\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value })\n  }\n\n  render () {\n    const { cats, searchfield } = this.state;\n    const filteredCats = cats.filter(cat => {\n      return cat.name.toLowerCase().includes(searchfield.toLowerCase());\n    })\n    return !cats.length ?\n      <h1 className='tc'>Loading</h1> :\n      (\n        <div className='tc ma4'>\n          <h1 className='f1'>My Cat Friends Contact</h1>\n          <SearchBox searchChange={this.onSearchChange}/>\n          <Scroll>\n            <ErrorBoundary>\n              <Cardlist cats={filteredCats}/>\n            </ErrorBoundary>\n          </Scroll>\n        </div>\n      );\n    \n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}